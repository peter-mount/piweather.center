package svg

import (
	common "github.com/peter-mount/piweather.center"
	"io"
	"strings"
)

type SVG interface {
	Defs(Handler) SVG
	Style(string) SVG

	// Draw a Drawable
	Draw(Drawable, ...string) SVG

	// Group wraps operations in a <g> element
	Group(Handler, ...string) SVG

	ClipPath(Handler, ...string) SVG
	Rect(x0, y0, x1, y1 float64, attrs ...string) SVG
	Circle(cx, cy, r float64, attrs ...string) SVG
	Ellipse(cx, cy, rx, ry float64, attrs ...string) SVG
	Line(x0, y0, x1, y1 float64, attrs ...string) SVG

	Text(x, y, rot float64, text string, attrs ...string) SVG

	WriteString(string) SVG
	WriteCData(string) SVG
	Tag(t string, h Handler, args ...string) SVG
}

type Handler func(SVG)

type Drawable interface {
	Draw(SVG, ...string)
}

type svg struct {
	w             io.Writer
	width, height float64
}

func New(w io.Writer, width, height float64, h Handler) {
	s := &svg{w: w, width: width, height: height}
	s.WriteString("<?xml version=\"1.0\"?>\n<!-- Generated by " + common.Version + " -->\n")
	s.Tag("svg", h,
		Attr("xmlns:svg", "http://www.w3.org/2000/svg"),
		Attr("xmlns", "http://www.w3.org/2000/svg"),
		Attr("version", "1.0"),
		AttrN("width", width),
		AttrN("height", height),
	)
}

func (s *svg) WriteString(f string) SVG {
	_, _ = io.WriteString(s.w, f)
	return s
}

func (s *svg) WriteCData(f string) SVG {
	return s.WriteString("<![CDATA[" + f + "]]>")
}

func (s *svg) startEmptyTag(t string, args ...string) SVG {
	s.startTag(true, t, args)
	return s
}

func (s *svg) startTag(empty bool, t string, args []string) {
	if len(args) == 0 {
		s.WriteString("<" + t)
	} else {
		s.WriteString("<" + t + " " + strings.Join(args, " "))
	}
	if empty {
		s.WriteString("/>")
	} else {
		s.WriteString(">")
	}
}

func (s *svg) endTag(t string) {
	s.WriteString("</" + t + ">")
}

func (s *svg) Tag(t string, h Handler, args ...string) SVG {
	s.startTag(h == nil, t, args)
	if h != nil {
		h(s)
		s.endTag(t)
	}
	return s
}

func (s *svg) Defs(h Handler) SVG { return s.Tag("defs", h) }

func (s *svg) Style(styles string) SVG {
	return s.Tag("style", func(s SVG) {
		s.WriteCData(styles)
	})
}

func (s *svg) Draw(h Drawable, a ...string) SVG {
	if h != nil {
		h.Draw(s, a...)
	}
	return s
}

func (s *svg) Rect(x0, y0, x1, y1 float64, attrs ...string) SVG {
	if x0 > x1 {
		x0, x1 = x1, x0
	}
	if y0 > y1 {
		y0, y1 = y1, y0
	}
	return s.startEmptyTag(
		"rect",
		AttrMerge(attrs,
			AttrN("x", x0), AttrN("y", y0),
			AttrN("width", x1-x0), AttrN("height", y1-y0),
		)...,
	)
}

func (s *svg) Circle(cx, cy, r float64, attrs ...string) SVG {
	return s.startEmptyTag(
		"circle",
		AttrMerge(attrs,
			AttrN("cx", cx), AttrN("cy", cy),
			AttrN("r", r),
		)...,
	)
}

func (s *svg) Ellipse(cx, cy, rx, ry float64, attrs ...string) SVG {
	return s.startEmptyTag(
		"ellipse",
		AttrMerge(attrs,
			AttrN("cx", cx), AttrN("cy", cy),
			AttrN("rx", rx), AttrN("ry", ry),
		)...,
	)
}

func (s *svg) Line(x1, y1, x2, y2 float64, attrs ...string) SVG {
	return s.startEmptyTag(
		"line",
		AttrMerge(attrs,
			AttrN("x1", x1), AttrN("y1", y1),
			AttrN("x2", x2), AttrN("y2", y2),
		)...,
	)
}

func (s *svg) Group(h Handler, attrs ...string) SVG {
	return s.Tag("g", h, attrs...)
}

func (s *svg) ClipPath(h Handler, attrs ...string) SVG {
	return s.Tag("clipPath", h, attrs...)
}

func (s *svg) Text(x, y, rot float64, text string, attrs ...string) SVG {
	text = strings.TrimSpace(text)

	if text != "" && text != "<![CDATA[]]>" {
		s.startTag(false,
			"text",
			AttrMerge(attrs,
				AttrN("x", x),
				AttrN("y", y),
				Transform().Rotate(rot, x, y).Attr(),
			),
		)
		s.WriteString(text)
		s.endTag("text")
	}

	return s
}
