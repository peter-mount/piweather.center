package svg

import (
	"fmt"
	common "github.com/peter-mount/piweather.center"
	"io"
	"strings"
)

type SVG interface {
	Defs(Handler) SVG
	Style(string) SVG

	// Draw a Drawable
	Draw(Drawable, ...string) SVG

	// Group wraps operations in a <g> element
	Group(Handler, ...string) SVG

	Rect(x0, y0, x1, y1 float64, attrs ...string) SVG

	Text(x, y, rot float64, text string, attrs ...string) SVG

	WriteString(string, ...interface{}) SVG
	WriteCData(string, ...interface{}) SVG
	Tag(t string, h Handler, args ...string) SVG
}

type Handler func(SVG)

type Drawable interface {
	Draw(SVG, ...string)
}

type svg struct {
	w             io.Writer
	width, height float64
}

func New(w io.Writer, width, height float64, h Handler) {
	s := &svg{w: w, width: width, height: height}
	s.WriteString("<?xml version=\"1.0\"?>\n<!-- Generated by " + common.Version + " -->\n")
	s.Tag("svg", h,
		Attr("xmlns:svg", "http://www.w3.org/2000/svg"),
		Attr("xmlns", "http://www.w3.org/2000/svg"),
		Attr("version", "1.0"),
		AttrN("width", width),
		AttrN("height", height),
	)
}

func (s *svg) WriteString(f string, a ...interface{}) SVG {
	_, _ = io.WriteString(s.w, fmt.Sprintf(f, a...))
	return s
}

func (s *svg) WriteCData(f string, a ...interface{}) SVG {
	return s.WriteString("<![CDATA["+f+"]]>", a...)
}

func (s *svg) start(t string, args ...string) { s.startTag(false, t, args) }

func (s *svg) emptyTag(t string, args ...string) SVG {
	s.startTag(true, t, args)
	return s
}

func (s *svg) startTag(empty bool, t string, args []string) {
	if len(args) == 0 {
		s.WriteString("<%s", t)
	} else {
		s.WriteString("<%s %s", t, strings.Join(args, " "))
	}
	if empty {
		s.WriteString("/>")
	} else {
		s.WriteString(">")
	}
}

func (s *svg) end(t string) {
	s.WriteString("</%s>", t)
}

func (s *svg) Tag(t string, h Handler, args ...string) SVG {
	s.startTag(h == nil, t, args)
	if h != nil {
		h(s)
		s.end(t)
	}
	return s
}

func (s *svg) Defs(h Handler) SVG { return s.Tag("defs", h) }

func (s *svg) Style(styles string) SVG { return s.WriteString("<style><![CDATA[%s]]></style>", styles) }

func (s *svg) Draw(h Drawable, a ...string) SVG {
	if h != nil {
		h.Draw(s, a...)
	}
	return s
}

func (s *svg) Rect(x0, y0, x1, y1 float64, attrs ...string) SVG {
	if x0 > x1 {
		x0, x1 = x1, x0
	}
	if y0 > y1 {
		y0, y1 = y1, y0
	}
	return s.emptyTag(
		"rect",
		AttrMerge(attrs,
			AttrN("x", x0), AttrN("y", y0),
			AttrN("width", x1-x0), AttrN("height", y1-y0),
		)...,
	)
}

func (s *svg) Group(h Handler, attrs ...string) SVG {
	return s.Tag("g", h, attrs...)
}

func (s *svg) Text(x, y, rot float64, text string, attrs ...string) SVG {
	text = strings.TrimSpace(text)

	if text != "" && text != "<![CDATA[]]>" {
		s.start("text",
			AttrMerge(attrs,
				AttrN("x", x),
				AttrN("y", y),
				Transform().Rotate(rot, x, y).Attr(),
			)...,
		)
		s.WriteString(text)
		s.end("text")
	}

	return s
}
